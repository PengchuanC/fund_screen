// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.18.0
// source: api.proto

package services

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_api_proto protoreflect.FileDescriptor

var file_api_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0b, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xe6, 0x02, 0x0a,
	0x0f, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x3d, 0x0a, 0x0c, 0x46, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x57, 0x0a, 0x14, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x46, 0x75, 0x6e, 0x64,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0f, 0x46, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x43, 0x0a, 0x10, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x72, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x72,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_api_proto_goTypes = []interface{}{
	(*ClassifyReq)(nil),           // 0: services.ClassifyReq
	(*FundBasicInfoRequest)(nil),  // 1: services.FundBasicInfoRequest
	(*StyleReq)(nil),              // 2: services.StyleReq
	(*IndexCorrReq)(nil),          // 3: services.IndexCorrReq
	(*ClassifyResp)(nil),          // 4: services.ClassifyResp
	(*FundBasicInfoResponse)(nil), // 5: services.FundBasicInfoResponse
	(*StyleResp)(nil),             // 6: services.StyleResp
	(*IndexCorrResp)(nil),         // 7: services.IndexCorrResp
}
var file_api_proto_depIdxs = []int32{
	0, // 0: services.ScreenRpcServer.FundCategory:input_type -> services.ClassifyReq
	1, // 1: services.ScreenRpcServer.FundBasicInfoHandler:input_type -> services.FundBasicInfoRequest
	2, // 2: services.ScreenRpcServer.FundScaleNature:input_type -> services.StyleReq
	2, // 3: services.ScreenRpcServer.FundStyleNature:input_type -> services.StyleReq
	3, // 4: services.ScreenRpcServer.FundRelatedIndex:input_type -> services.IndexCorrReq
	4, // 5: services.ScreenRpcServer.FundCategory:output_type -> services.ClassifyResp
	5, // 6: services.ScreenRpcServer.FundBasicInfoHandler:output_type -> services.FundBasicInfoResponse
	6, // 7: services.ScreenRpcServer.FundScaleNature:output_type -> services.StyleResp
	6, // 8: services.ScreenRpcServer.FundStyleNature:output_type -> services.StyleResp
	7, // 9: services.ScreenRpcServer.FundRelatedIndex:output_type -> services.IndexCorrResp
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_api_proto_init() }
func file_api_proto_init() {
	if File_api_proto != nil {
		return
	}
	file_classify_proto_init()
	file_basic_proto_init()
	file_style_proto_init()
	file_index_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_goTypes,
		DependencyIndexes: file_api_proto_depIdxs,
	}.Build()
	File_api_proto = out.File
	file_api_proto_rawDesc = nil
	file_api_proto_goTypes = nil
	file_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ScreenRpcServerClient is the client API for ScreenRpcServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScreenRpcServerClient interface {
	// 基金行业分类
	FundCategory(ctx context.Context, in *ClassifyReq, opts ...grpc.CallOption) (*ClassifyResp, error)
	// 获取基金基础信息
	FundBasicInfoHandler(ctx context.Context, in *FundBasicInfoRequest, opts ...grpc.CallOption) (*FundBasicInfoResponse, error)
	// 获取基金规模属性
	FundScaleNature(ctx context.Context, in *StyleReq, opts ...grpc.CallOption) (*StyleResp, error)
	// 获取基金风格属性
	FundStyleNature(ctx context.Context, in *StyleReq, opts ...grpc.CallOption) (*StyleResp, error)
	// 获取基金近期最相关的指数
	FundRelatedIndex(ctx context.Context, in *IndexCorrReq, opts ...grpc.CallOption) (*IndexCorrResp, error)
}

type screenRpcServerClient struct {
	cc grpc.ClientConnInterface
}

func NewScreenRpcServerClient(cc grpc.ClientConnInterface) ScreenRpcServerClient {
	return &screenRpcServerClient{cc}
}

func (c *screenRpcServerClient) FundCategory(ctx context.Context, in *ClassifyReq, opts ...grpc.CallOption) (*ClassifyResp, error) {
	out := new(ClassifyResp)
	err := c.cc.Invoke(ctx, "/services.ScreenRpcServer/FundCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *screenRpcServerClient) FundBasicInfoHandler(ctx context.Context, in *FundBasicInfoRequest, opts ...grpc.CallOption) (*FundBasicInfoResponse, error) {
	out := new(FundBasicInfoResponse)
	err := c.cc.Invoke(ctx, "/services.ScreenRpcServer/FundBasicInfoHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *screenRpcServerClient) FundScaleNature(ctx context.Context, in *StyleReq, opts ...grpc.CallOption) (*StyleResp, error) {
	out := new(StyleResp)
	err := c.cc.Invoke(ctx, "/services.ScreenRpcServer/FundScaleNature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *screenRpcServerClient) FundStyleNature(ctx context.Context, in *StyleReq, opts ...grpc.CallOption) (*StyleResp, error) {
	out := new(StyleResp)
	err := c.cc.Invoke(ctx, "/services.ScreenRpcServer/FundStyleNature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *screenRpcServerClient) FundRelatedIndex(ctx context.Context, in *IndexCorrReq, opts ...grpc.CallOption) (*IndexCorrResp, error) {
	out := new(IndexCorrResp)
	err := c.cc.Invoke(ctx, "/services.ScreenRpcServer/FundRelatedIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScreenRpcServerServer is the server API for ScreenRpcServer service.
type ScreenRpcServerServer interface {
	// 基金行业分类
	FundCategory(context.Context, *ClassifyReq) (*ClassifyResp, error)
	// 获取基金基础信息
	FundBasicInfoHandler(context.Context, *FundBasicInfoRequest) (*FundBasicInfoResponse, error)
	// 获取基金规模属性
	FundScaleNature(context.Context, *StyleReq) (*StyleResp, error)
	// 获取基金风格属性
	FundStyleNature(context.Context, *StyleReq) (*StyleResp, error)
	// 获取基金近期最相关的指数
	FundRelatedIndex(context.Context, *IndexCorrReq) (*IndexCorrResp, error)
}

// UnimplementedScreenRpcServerServer can be embedded to have forward compatible implementations.
type UnimplementedScreenRpcServerServer struct {
}

func (*UnimplementedScreenRpcServerServer) FundCategory(context.Context, *ClassifyReq) (*ClassifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundCategory not implemented")
}
func (*UnimplementedScreenRpcServerServer) FundBasicInfoHandler(context.Context, *FundBasicInfoRequest) (*FundBasicInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundBasicInfoHandler not implemented")
}
func (*UnimplementedScreenRpcServerServer) FundScaleNature(context.Context, *StyleReq) (*StyleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundScaleNature not implemented")
}
func (*UnimplementedScreenRpcServerServer) FundStyleNature(context.Context, *StyleReq) (*StyleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundStyleNature not implemented")
}
func (*UnimplementedScreenRpcServerServer) FundRelatedIndex(context.Context, *IndexCorrReq) (*IndexCorrResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundRelatedIndex not implemented")
}

func RegisterScreenRpcServerServer(s *grpc.Server, srv ScreenRpcServerServer) {
	s.RegisterService(&_ScreenRpcServer_serviceDesc, srv)
}

func _ScreenRpcServer_FundCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScreenRpcServerServer).FundCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.ScreenRpcServer/FundCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScreenRpcServerServer).FundCategory(ctx, req.(*ClassifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScreenRpcServer_FundBasicInfoHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundBasicInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScreenRpcServerServer).FundBasicInfoHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.ScreenRpcServer/FundBasicInfoHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScreenRpcServerServer).FundBasicInfoHandler(ctx, req.(*FundBasicInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScreenRpcServer_FundScaleNature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StyleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScreenRpcServerServer).FundScaleNature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.ScreenRpcServer/FundScaleNature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScreenRpcServerServer).FundScaleNature(ctx, req.(*StyleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScreenRpcServer_FundStyleNature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StyleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScreenRpcServerServer).FundStyleNature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.ScreenRpcServer/FundStyleNature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScreenRpcServerServer).FundStyleNature(ctx, req.(*StyleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScreenRpcServer_FundRelatedIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexCorrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScreenRpcServerServer).FundRelatedIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.ScreenRpcServer/FundRelatedIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScreenRpcServerServer).FundRelatedIndex(ctx, req.(*IndexCorrReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScreenRpcServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.ScreenRpcServer",
	HandlerType: (*ScreenRpcServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FundCategory",
			Handler:    _ScreenRpcServer_FundCategory_Handler,
		},
		{
			MethodName: "FundBasicInfoHandler",
			Handler:    _ScreenRpcServer_FundBasicInfoHandler_Handler,
		},
		{
			MethodName: "FundScaleNature",
			Handler:    _ScreenRpcServer_FundScaleNature_Handler,
		},
		{
			MethodName: "FundStyleNature",
			Handler:    _ScreenRpcServer_FundStyleNature_Handler,
		},
		{
			MethodName: "FundRelatedIndex",
			Handler:    _ScreenRpcServer_FundRelatedIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
